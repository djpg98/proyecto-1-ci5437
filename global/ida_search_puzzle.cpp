#include <iostream>
#include <string> 
#include <vector>
#include <utility>
#include <cstdint>
#include <stdlib.h>
#include <unistd.h>
#include <chrono>
#include "inputOutput.h"
#define INFINITY 10000 //May lower it later, have to read about it

using namespace std;

struct stateinfo {
    short int pos[16];
    short int blank;
};

stateinfo aux;
abstraction_t * abst[16];
state_map_t * pdb[16];
state_t state, child, abst_state, final_state;
int f_value, h_value, cost, bound, initial_bound, hist,  explored, total_nodes, pdbNumber;
vector<int> path;
string newline = "\n";
chrono::high_resolution_clock::time_point tstart, tend, tstartiter, tenditer;
int delta[16][16][16] = {{{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}},
{{0, -1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {1, 0, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, -1, 0, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, -1, 0, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2}, {-1, 2, 2, 2, 0, -1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2}, {2, -1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2}, {2, 2, -1, 2, 2, -1, 0, 1, 2, 2, 1, 2, 2, 2, 2, 2}, {2, 2, 2, -1, 2, 2, -1, 0, 2, 2, 2, 1, 2, 2, 2, 2}, {2, 2, 2, 2, -1, 2, 2, 2, 0, -1, 2, 2, 1, 2, 2, 2}, {2, 2, 2, 2, 2, -1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 2}, {2, 2, 2, 2, 2, 2, -1, 2, 2, -1, 0, 1, 2, 2, 1, 2}, {2, 2, 2, 2, 2, 2, 2, -1, 2, 2, -1, 0, 2, 2, 2, 1}, {2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 0, -1, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 1, 0, 1, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, -1, 0, 1}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, -1, 0}},
{{0, -1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {1, 0, -1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 1, 0, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, -1, 0, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2}, {-1, 2, 2, 2, 0, -1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2}, {2, -1, 2, 2, 1, 0, -1, 2, 2, 1, 2, 2, 2, 2, 2, 2}, {2, 2, -1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 2, 2, 2, 2}, {2, 2, 2, -1, 2, 2, -1, 0, 2, 2, 2, 1, 2, 2, 2, 2}, {2, 2, 2, 2, -1, 2, 2, 2, 0, -1, 2, 2, 1, 2, 2, 2}, {2, 2, 2, 2, 2, -1, 2, 2, 1, 0, -1, 2, 2, 1, 2, 2}, {2, 2, 2, 2, 2, 2, -1, 2, 2, 1, 0, 1, 2, 2, 1, 2}, {2, 2, 2, 2, 2, 2, 2, -1, 2, 2, -1, 0, 2, 2, 2, 1}, {2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 0, -1, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 1, 0, -1, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 1, 0, 1}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, -1, 0}},
{{0, -1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {1, 0, -1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 1, 0, -1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 1, 0, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2}, {-1, 2, 2, 2, 0, -1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2}, {2, -1, 2, 2, 1, 0, -1, 2, 2, 1, 2, 2, 2, 2, 2, 2}, {2, 2, -1, 2, 2, 1, 0, -1, 2, 2, 1, 2, 2, 2, 2, 2}, {2, 2, 2, -1, 2, 2, 1, 0, 2, 2, 2, 1, 2, 2, 2, 2}, {2, 2, 2, 2, -1, 2, 2, 2, 0, -1, 2, 2, 1, 2, 2, 2}, {2, 2, 2, 2, 2, -1, 2, 2, 1, 0, -1, 2, 2, 1, 2, 2}, {2, 2, 2, 2, 2, 2, -1, 2, 2, 1, 0, -1, 2, 2, 1, 2}, {2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 1, 0, 2, 2, 2, 1}, {2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 0, -1, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 1, 0, -1, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 1, 0, -1}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 1, 0}},
{{0, 1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {-1, 0, 1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, -1, 0, 1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, -1, 0, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2}, {1, 2, 2, 2, 0, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2}, {2, 1, 2, 2, -1, 0, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2}, {2, 2, 1, 2, 2, -1, 0, 1, 2, 2, 1, 2, 2, 2, 2, 2}, {2, 2, 2, 1, 2, 2, -1, 0, 2, 2, 2, 1, 2, 2, 2, 2}, {2, 2, 2, 2, -1, 2, 2, 2, 0, 1, 2, 2, 1, 2, 2, 2}, {2, 2, 2, 2, 2, -1, 2, 2, -1, 0, 1, 2, 2, 1, 2, 2}, {2, 2, 2, 2, 2, 2, -1, 2, 2, -1, 0, 1, 2, 2, 1, 2}, {2, 2, 2, 2, 2, 2, 2, -1, 2, 2, -1, 0, 2, 2, 2, 1}, {2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 0, 1, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, -1, 0, 1, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, -1, 0, 1}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, -1, 0}},
{{0, -1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {1, 0, 1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, -1, 0, 1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, -1, 0, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2}, {1, 2, 2, 2, 0, -1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2}, {2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2}, {2, 2, 1, 2, 2, -1, 0, 1, 2, 2, 1, 2, 2, 2, 2, 2}, {2, 2, 2, 1, 2, 2, -1, 0, 2, 2, 2, 1, 2, 2, 2, 2}, {2, 2, 2, 2, -1, 2, 2, 2, 0, -1, 2, 2, 1, 2, 2, 2}, {2, 2, 2, 2, 2, -1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 2}, {2, 2, 2, 2, 2, 2, -1, 2, 2, -1, 0, 1, 2, 2, 1, 2}, {2, 2, 2, 2, 2, 2, 2, -1, 2, 2, -1, 0, 2, 2, 2, 1}, {2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 0, -1, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 1, 0, 1, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, -1, 0, 1}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, -1, 0}},
{{0, -1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {1, 0, -1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 1, 0, 1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, -1, 0, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2}, {1, 2, 2, 2, 0, -1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2}, {2, 1, 2, 2, 1, 0, -1, 2, 2, 1, 2, 2, 2, 2, 2, 2}, {2, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 2, 2, 2, 2}, {2, 2, 2, 1, 2, 2, -1, 0, 2, 2, 2, 1, 2, 2, 2, 2}, {2, 2, 2, 2, -1, 2, 2, 2, 0, -1, 2, 2, 1, 2, 2, 2}, {2, 2, 2, 2, 2, -1, 2, 2, 1, 0, -1, 2, 2, 1, 2, 2}, {2, 2, 2, 2, 2, 2, -1, 2, 2, 1, 0, 1, 2, 2, 1, 2}, {2, 2, 2, 2, 2, 2, 2, -1, 2, 2, -1, 0, 2, 2, 2, 1}, {2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 0, -1, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 1, 0, -1, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 1, 0, 1}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, -1, 0}},
{{0, -1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {1, 0, -1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 1, 0, -1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 1, 0, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2}, {1, 2, 2, 2, 0, -1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2}, {2, 1, 2, 2, 1, 0, -1, 2, 2, 1, 2, 2, 2, 2, 2, 2}, {2, 2, 1, 2, 2, 1, 0, -1, 2, 2, 1, 2, 2, 2, 2, 2}, {2, 2, 2, 1, 2, 2, 1, 0, 2, 2, 2, 1, 2, 2, 2, 2}, {2, 2, 2, 2, -1, 2, 2, 2, 0, -1, 2, 2, 1, 2, 2, 2}, {2, 2, 2, 2, 2, -1, 2, 2, 1, 0, -1, 2, 2, 1, 2, 2}, {2, 2, 2, 2, 2, 2, -1, 2, 2, 1, 0, -1, 2, 2, 1, 2}, {2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 1, 0, 2, 2, 2, 1}, {2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 0, -1, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 1, 0, -1, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 1, 0, -1}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 1, 0}},
{{0, 1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {-1, 0, 1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, -1, 0, 1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, -1, 0, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2}, {1, 2, 2, 2, 0, 1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2}, {2, 1, 2, 2, -1, 0, 1, 2, 2, -1, 2, 2, 2, 2, 2, 2}, {2, 2, 1, 2, 2, -1, 0, 1, 2, 2, -1, 2, 2, 2, 2, 2}, {2, 2, 2, 1, 2, 2, -1, 0, 2, 2, 2, -1, 2, 2, 2, 2}, {2, 2, 2, 2, 1, 2, 2, 2, 0, 1, 2, 2, 1, 2, 2, 2}, {2, 2, 2, 2, 2, 1, 2, 2, -1, 0, 1, 2, 2, 1, 2, 2}, {2, 2, 2, 2, 2, 2, 1, 2, 2, -1, 0, 1, 2, 2, 1, 2}, {2, 2, 2, 2, 2, 2, 2, 1, 2, 2, -1, 0, 2, 2, 2, 1}, {2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 0, 1, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, -1, 0, 1, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, -1, 0, 1}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, -1, 0}},
{{0, -1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {1, 0, 1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, -1, 0, 1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, -1, 0, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2}, {1, 2, 2, 2, 0, -1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2}, {2, 1, 2, 2, 1, 0, 1, 2, 2, -1, 2, 2, 2, 2, 2, 2}, {2, 2, 1, 2, 2, -1, 0, 1, 2, 2, -1, 2, 2, 2, 2, 2}, {2, 2, 2, 1, 2, 2, -1, 0, 2, 2, 2, -1, 2, 2, 2, 2}, {2, 2, 2, 2, 1, 2, 2, 2, 0, -1, 2, 2, 1, 2, 2, 2}, {2, 2, 2, 2, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 2}, {2, 2, 2, 2, 2, 2, 1, 2, 2, -1, 0, 1, 2, 2, 1, 2}, {2, 2, 2, 2, 2, 2, 2, 1, 2, 2, -1, 0, 2, 2, 2, 1}, {2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 0, -1, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 1, 0, 1, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, -1, 0, 1}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, -1, 0}},
{{0, -1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {1, 0, -1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 1, 0, 1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, -1, 0, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2}, {1, 2, 2, 2, 0, -1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2}, {2, 1, 2, 2, 1, 0, -1, 2, 2, -1, 2, 2, 2, 2, 2, 2}, {2, 2, 1, 2, 2, 1, 0, 1, 2, 2, -1, 2, 2, 2, 2, 2}, {2, 2, 2, 1, 2, 2, -1, 0, 2, 2, 2, -1, 2, 2, 2, 2}, {2, 2, 2, 2, 1, 2, 2, 2, 0, -1, 2, 2, 1, 2, 2, 2}, {2, 2, 2, 2, 2, 1, 2, 2, 1, 0, -1, 2, 2, 1, 2, 2}, {2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2}, {2, 2, 2, 2, 2, 2, 2, 1, 2, 2, -1, 0, 2, 2, 2, 1}, {2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 0, -1, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 1, 0, -1, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 1, 0, 1}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, -1, 0}},
{{0, -1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {1, 0, -1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 1, 0, -1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 1, 0, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2}, {1, 2, 2, 2, 0, -1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2}, {2, 1, 2, 2, 1, 0, -1, 2, 2, -1, 2, 2, 2, 2, 2, 2}, {2, 2, 1, 2, 2, 1, 0, -1, 2, 2, -1, 2, 2, 2, 2, 2}, {2, 2, 2, 1, 2, 2, 1, 0, 2, 2, 2, -1, 2, 2, 2, 2}, {2, 2, 2, 2, 1, 2, 2, 2, 0, -1, 2, 2, 1, 2, 2, 2}, {2, 2, 2, 2, 2, 1, 2, 2, 1, 0, -1, 2, 2, 1, 2, 2}, {2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 0, -1, 2, 2, 1, 2}, {2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 0, 2, 2, 2, 1}, {2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 0, -1, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 1, 0, -1, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 1, 0, -1}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 1, 0}},
{{0, 1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {-1, 0, 1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, -1, 0, 1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, -1, 0, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2}, {1, 2, 2, 2, 0, 1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2}, {2, 1, 2, 2, -1, 0, 1, 2, 2, -1, 2, 2, 2, 2, 2, 2}, {2, 2, 1, 2, 2, -1, 0, 1, 2, 2, -1, 2, 2, 2, 2, 2}, {2, 2, 2, 1, 2, 2, -1, 0, 2, 2, 2, -1, 2, 2, 2, 2}, {2, 2, 2, 2, 1, 2, 2, 2, 0, 1, 2, 2, -1, 2, 2, 2}, {2, 2, 2, 2, 2, 1, 2, 2, -1, 0, 1, 2, 2, -1, 2, 2}, {2, 2, 2, 2, 2, 2, 1, 2, 2, -1, 0, 1, 2, 2, -1, 2}, {2, 2, 2, 2, 2, 2, 2, 1, 2, 2, -1, 0, 2, 2, 2, -1}, {2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 0, 1, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, -1, 0, 1, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, -1, 0, 1}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, -1, 0}},
{{0, -1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {1, 0, 1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, -1, 0, 1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, -1, 0, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2}, {1, 2, 2, 2, 0, -1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2}, {2, 1, 2, 2, 1, 0, 1, 2, 2, -1, 2, 2, 2, 2, 2, 2}, {2, 2, 1, 2, 2, -1, 0, 1, 2, 2, -1, 2, 2, 2, 2, 2}, {2, 2, 2, 1, 2, 2, -1, 0, 2, 2, 2, -1, 2, 2, 2, 2}, {2, 2, 2, 2, 1, 2, 2, 2, 0, -1, 2, 2, -1, 2, 2, 2}, {2, 2, 2, 2, 2, 1, 2, 2, 1, 0, 1, 2, 2, -1, 2, 2}, {2, 2, 2, 2, 2, 2, 1, 2, 2, -1, 0, 1, 2, 2, -1, 2}, {2, 2, 2, 2, 2, 2, 2, 1, 2, 2, -1, 0, 2, 2, 2, -1}, {2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 0, -1, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 0, 1, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, -1, 0, 1}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, -1, 0}},
{{0, -1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {1, 0, -1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 1, 0, 1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, -1, 0, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2}, {1, 2, 2, 2, 0, -1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2}, {2, 1, 2, 2, 1, 0, -1, 2, 2, -1, 2, 2, 2, 2, 2, 2}, {2, 2, 1, 2, 2, 1, 0, 1, 2, 2, -1, 2, 2, 2, 2, 2}, {2, 2, 2, 1, 2, 2, -1, 0, 2, 2, 2, -1, 2, 2, 2, 2}, {2, 2, 2, 2, 1, 2, 2, 2, 0, -1, 2, 2, -1, 2, 2, 2}, {2, 2, 2, 2, 2, 1, 2, 2, 1, 0, -1, 2, 2, -1, 2, 2}, {2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 0, 1, 2, 2, -1, 2}, {2, 2, 2, 2, 2, 2, 2, 1, 2, 2, -1, 0, 2, 2, 2, -1}, {2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 0, -1, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 0, -1, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 0, 1}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, -1, 0}},
{{0, -1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {1, 0, -1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 1, 0, -1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 1, 0, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2}, {1, 2, 2, 2, 0, -1, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2}, {2, 1, 2, 2, 1, 0, -1, 2, 2, -1, 2, 2, 2, 2, 2, 2}, {2, 2, 1, 2, 2, 1, 0, -1, 2, 2, -1, 2, 2, 2, 2, 2}, {2, 2, 2, 1, 2, 2, 1, 0, 2, 2, 2, -1, 2, 2, 2, 2}, {2, 2, 2, 2, 1, 2, 2, 2, 0, -1, 2, 2, -1, 2, 2, 2}, {2, 2, 2, 2, 2, 1, 2, 2, 1, 0, -1, 2, 2, -1, 2, 2}, {2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 0, -1, 2, 2, -1, 2}, {2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 0, 2, 2, 2, -1}, {2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 0, -1, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 0, -1, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 0, -1}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 0}}
};
unsigned mtable0[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
unsigned mtable1[16] = {1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5};
unsigned mtable2[16] = {2, 1, 0, 1, 3, 2, 1, 2, 4, 3, 2, 3, 5, 4, 3, 4};
unsigned mtable3[16] = {3, 2, 1, 0, 4, 3, 2, 1, 5, 4, 3, 2, 6, 5, 4, 3};
unsigned mtable4[16] = {1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 3, 4, 2, 3, 4, 5};
unsigned mtable5[16] = {2, 1, 2, 3, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4};
unsigned mtable6[16] = {3, 2, 1, 2, 2, 1, 0, 1, 3, 2, 1, 2, 4, 3, 2, 3};
unsigned mtable7[16] = {4, 3, 2, 1, 3, 2, 1, 0, 4, 3, 2, 1, 5, 4, 3, 2};
unsigned mtable8[16] = {2, 3, 4, 5, 1, 2, 3, 4, 0, 1, 2, 3, 1, 2, 3, 4};
unsigned mtable9[16] = {3, 2, 3, 4, 2, 1, 2, 3, 1, 0, 1, 2, 2, 1, 2, 3};
unsigned mtable10[16] = {4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 3, 2, 1, 2};
unsigned mtable11[16] = {5, 4, 3, 2, 4, 3, 2, 1, 3, 2, 1, 0, 4, 3, 2, 1};
unsigned mtable12[16] = {3, 4, 5, 6, 2, 3, 4, 5, 1, 2, 3, 4, 0, 1, 2, 3};
unsigned mtable13[16] = {4, 3, 4, 5, 3, 2, 3, 4, 2, 1, 2, 3, 1, 0, 1, 2};
unsigned mtable14[16] = {5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1};
unsigned mtable15[16] = {6, 5, 4, 3, 5, 4, 3, 2, 4, 3, 2, 1, 3, 2, 1, 0};
unsigned * mtable[16] = {mtable0, mtable1, mtable2, mtable3, mtable4, mtable5, mtable6, mtable7, mtable8, mtable9, mtable10, mtable11, mtable12, mtable13, mtable14, mtable15};


int get_h_value(state_t state){
    char staterep[40];
    int h, start, end, position, tile;

    sprint_state(staterep, 40, &state);

    string line(staterep);

    start = 0;
    position = 0;
    h = 0;
    end = line.find(' ');

    while(end != string::npos){
        if (line.substr(start, end - start).compare("B") != 0){
            tile = stoi(line.substr(start, end - start));
            h = h + mtable[tile][position];
        }

        position++;
        end++;
        start = end;
        end = line.find(' ', start);
    }

    return h;

}

int update_h_value(stateinfo aux, char label_id){
    int new_blank_pos;
    short int tile;
    switch (label_id){
        case 'U':
            new_blank_pos = aux.blank - 4;
            break;
        case 'D':
            new_blank_pos = aux.blank + 4;
            break;
        case 'L':
            new_blank_pos = aux.blank - 1;
            break;
        case 'R':
            new_blank_pos = aux.blank + 1;
            break;
        default:
            cout << "HEY MAN WTF";
            exit(EXIT_FAILURE);
            
    }

    tile = aux.pos[new_blank_pos];
    return h_value + delta[tile][new_blank_pos][aux.blank];
}

void update_stateinfo(stateinfo & aux, char label_id){
    int new_blank_pos;

    switch (label_id){
        case 'U':
            new_blank_pos = aux.blank - 4;
            break;
        case 'D':
            new_blank_pos = aux.blank + 4;
            break;
        case 'L':
            new_blank_pos = aux.blank - 1;
            break;
        case 'R':
            new_blank_pos = aux.blank + 1;
            break;
        default:
            cout << "HEY MAN WTF";
            exit(EXIT_FAILURE);
            
    }


    swap(aux.pos[new_blank_pos], aux.pos[aux.blank]);
    aux.blank = new_blank_pos;
}

void revert_stateinfo(stateinfo & aux, char label_id){
    int new_blank_pos;

    switch (label_id){
        case 'U':
            new_blank_pos = aux.blank + 4;
            break;
        case 'D':
            new_blank_pos = aux.blank - 4;
            break;
        case 'L':
            new_blank_pos = aux.blank + 1;
            break;
        case 'R':
            new_blank_pos = aux.blank - 1;
            break;
        default:
            cout << "HEY MAN WTF";
            exit(EXIT_FAILURE);
            
    }


    swap(aux.pos[new_blank_pos], aux.pos[aux.blank]);
    aux.blank = new_blank_pos;
}

int revert_h_value(stateinfo aux, char label_id){
    int new_blank_pos;
    short int tile;
    switch (label_id){
        case 'U':
            new_blank_pos = aux.blank + 4;
            break;
        case 'D':
            new_blank_pos = aux.blank - 4;
            break;
        case 'L':
            new_blank_pos = aux.blank + 1;
            break;
        case 'R':
            new_blank_pos = aux.blank - 1;
            break;
        default:
            cout << "HEY MAN WTF";
            exit(EXIT_FAILURE);
            
    }

    tile = aux.pos[new_blank_pos];
    return h_value + delta[tile][new_blank_pos][aux.blank];
}




void load_state_info(state_t state, stateinfo & aux){
    char staterep[40];
    int h, start, end, position, tile;

    sprint_state(staterep, 40, &state);

    string line(staterep);

    start = 0;
    position = 0;
    h = 0;
    end = line.find(' ');

    while(end != string::npos){
        if (line.substr(start, end - start).compare("B") != 0){
            tile = stoi(line.substr(start, end - start));
            aux.pos[position] = tile;
        } else {
            aux.blank = position;
            aux.pos[position] = 0;
        }

        position++;
        end++;
        start = end;
        end = line.find(' ', start);
    }

    return;

}

void sigalrm_handler(int sig){
    cout << initial_bound << ", " << bound << ", " << -1 << ", " << total_nodes << ", " << explored << ", false, " << 900000 << newline;
    exit(EXIT_SUCCESS);
}

void sigint_handler(int sig){
    chrono::milliseconds time_taken = chrono::duration_cast<std::chrono::milliseconds>( tend - tstart );   
    cout << newline << "Tiempo transcurrido: " << time_taken.count() << "\n"; 
    cout << "Nodos explorados (Última iter.): " << explored << newline;
    exit(EXIT_FAILURE);
}

pair<bool, int> f_bounded_dfs_visit_puzzle(int g_value){
    int current_min, ruleid, original_history;
    ruleid_iterator_t iter;
    char label_id;

    original_history = hist;

    f_value = g_value + h_value;

    if (f_value > bound){

        return make_pair(false, f_value);
    }

    /*if (h_value == 0){
        return make_pair(true, g_value);
    }*/

    if (is_goal(&state)){
        return make_pair(true, g_value);
    }

    current_min = INFINITY; 

    init_fwd_iter(&iter, &state);

    while((ruleid = next_ruleid(&iter) ) >= 0){

        if (!fwd_rule_valid_for_history(hist,ruleid)){
            continue;
        }
        explored++;
        hist = next_fwd_history(hist, ruleid);
        cost = g_value + get_fwd_rule_cost(ruleid);
        apply_fwd_rule(ruleid, &state, &child);
        copy_state(&state, &child);


        label_id = get_fwd_rule_label(ruleid)[5];
        h_value = update_h_value(aux, label_id);
        update_stateinfo(aux, label_id);
        if (h_value < INFINITY){
            path.push_back(ruleid);
            pair<bool, int> ret_value = f_bounded_dfs_visit_puzzle(cost);
            if (ret_value.first){
                return make_pair(true, ret_value.second);
            }

            current_min = (ret_value.second < current_min) ? ret_value.second : current_min;
            path.pop_back();

        }

        hist = original_history;
        apply_bwd_rule(ruleid, &state, &child);
        copy_state(&state, &child);
        h_value = revert_h_value(aux, label_id);
        revert_stateinfo(aux, label_id);

    }

    return make_pair(false, current_min);
    

}

void ida_search_puzzle(string state_description){
    int64_t totalNodes, numAtD;  // counters

    if (read_state(state_description.c_str(), &state)==-1){
        cout << "Error leyendo el estado inicial" << newline;
        exit(EXIT_FAILURE);
    }

    signal(SIGALRM, &sigalrm_handler);  // set a signal handler
    signal (SIGINT,&sigint_handler);
    alarm(900);  // set an alarm for 900 seconds from now

    tstart = chrono::high_resolution_clock::now();

    bound = get_h_value(state);
    load_state_info(state, aux);
    initial_bound = bound;
    total_nodes = 0;

    while (true){
        hist = init_history;
        explored = 0;
        h_value = get_h_value(state);
        pair<bool, int> ret_value = f_bounded_dfs_visit_puzzle(0);
        if (ret_value.first){
            tend = chrono::high_resolution_clock::now();
            chrono::milliseconds time_taken = chrono::duration_cast<std::chrono::milliseconds>( tend - tstart );
            total_nodes = total_nodes + explored;
            cout << initial_bound << ", " << bound << ", " << ret_value.second << ", " << total_nodes << ", " << explored << ", true, " << time_taken.count() << newline;
            //reconstruct_solution(state_description, newline, path);
            return;
        }
        bound = ret_value.second;
        total_nodes = total_nodes + explored;
    }

}

int main(int argc, char **argv){
    vector<string>::iterator instanceIter;
    vector<string> instances;
    string instance, pdb_name;
    //pdbNumber = stoi(argv[3]);
    get_problem_instace(argv[1],instance);
    //load_pdbs(abst, pdb, argv[2], pdbNumber);
    ida_search_puzzle(instance);
    //cout << "FLAWLESS VICTORY\n";

    return 0;

}